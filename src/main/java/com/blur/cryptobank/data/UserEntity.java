package com.blur.cryptobank.data;

import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import javax.persistence.*;
import java.util.Collection;
import java.util.Collections;
import java.util.Map;

/**
 * This the UserEntity class. This class is used to store the user information.
 * Implements the UserDetails interface. This is used for authentication too.
 * The most of the getters and setters are generated by Lombok.
 */
@Entity
@Table(name = "user")
@Setter
@Getter
@NoArgsConstructor
public class UserEntity implements UserDetails {
    @Id
    @GeneratedValue(strategy= GenerationType.AUTO)
    private Long id;
    private String username;
    private String firstName;
    private String lastName;
    private String email;
    private String password;
    @Enumerated(EnumType.STRING)
    private UserRole role;

    private Boolean locked = false;
    private Boolean enabled = false;

    /**
     * The account, in which are stored the coins used by the user, is stored in a separate table in the database.
     */
    @ElementCollection
    private Map<Cryptocurrency, Double> account;

    private Double fiat;

    public UserEntity(String username, String firstName, String lastName, String email, String password, UserRole role, Double fiat) {
        this.username = username;
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.password = password;
        this.role = role;
        this.fiat = fiat;
    }

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return !locked;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return enabled;
    }

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        SimpleGrantedAuthority authority =
                new SimpleGrantedAuthority(role.name());
        return Collections.singletonList(authority);
    }

    @Override
    public String toString() {
        return String.format("User[id=%d, Username='%s', firstName='%s', lastName='%s', email='%s', password='%s', role='%s']", id, username, firstName, lastName, email, password, role, fiat);
    }

}
